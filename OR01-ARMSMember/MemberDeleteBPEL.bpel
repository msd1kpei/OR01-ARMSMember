<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Mon Mar 22 14:14:42 ICT 2010
  Author:  medisagn64
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="MemberDeleteBPEL"
               targetNamespace="http://xmlns.oracle.com/ARIS_KPEI_PROJECT_jws/OR01_ARMSMember/MemberDeleteBPEL"
               xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
               xmlns:client="http://xmlns.oracle.com/ARIS_KPEI_PROJECT_jws/OR01_ARMSMember/MemberDeleteBPEL"
               xmlns:ora="http://schemas.oracle.com/xpath/extension"
               xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
               xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
               xmlns:xpath20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:ns1="http://oracle.com/sca/soapservice/KPEI-MIDDLEWARE/Ge01-messageMonitor/messageMonitorService"
         xmlns:ns2="http://www.kpei.co.id/GE02-FileUtility"
         xmlns:ns3="http://oracle.com/sca/soapservice/kpei/GE03-XMLUtility/GE03_XMLUtility"
         xmlns:ns4="http://xmlns.oracle.com/pcbpel/adapter/file/ARIS-KPEI-PROJECT/OR01-ARMSMember/writeLocal"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:ns7="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:ns6="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ns8="http://kpei.co.id/MDwsReply.xsd"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ns9="http://www.kpei.co.id/schema/Member.001"
         xmlns:ns10="http://www.kpei.co.id/kpei/messageMonitor"
         xmlns:ns11="http://www.kpei.co.id/GE03-XMLUtility/types"
         xmlns:ns12="http://www.kpei.co.id/razor/Member_EOD"
         xmlns:ns13="http://www.kpei.co.id/razor/RefData_Intraday_Delete"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:ns14="http://www.kpei.co.id/GE02-FileUtility/types"
         xmlns:socket="http://www.oracle.com/XSL/Transform/java/oracle.tip.adapter.socket.ProtocolTranslator"
         xmlns:mhdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.mediator.service.common.functions.MediatorExtnFunction"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:med="http://schemas.oracle.com/mediator/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpel2="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:bpmn="http://schemas.oracle.com/bpm/xpath"
         xmlns:ns5="http://xmlns.oracle.com/pcbpel/adapter/jms/ARIS-KPEI-PROJECT/OR01-ARMSMember/MemberUpdate">

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  --> 
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="memberdeletebpel_client" partnerLinkType="client:MemberDeleteBPEL" myRole="MemberDeleteBPELProvider"/>
    <partnerLink name="GE02-FileUtility" partnerRole="GE02-FileUtility"
                 partnerLinkType="ns2:GE02-FileUtility"/>
    <partnerLink name="GE03-XMLUtility" partnerRole="GE03-XMLUtility"
                 partnerLinkType="ns3:GE03-XMLUtility"/>
    <partnerLink name="writeLocal" partnerRole="Write-local_role"
                 partnerLinkType="ns4:Write_local_plt"/>
    <partnerLink name="MemberUpdate" partnerRole="Produce_Message_role"
                 partnerLinkType="ns5:Produce_Message_plt"/>
  </partnerLinks>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable" messageType="client:MemberDeleteBPELRequestMessage"/>

    <!-- Reference to the message that will be returned to the requester-->
    <variable name="outputVariable" messageType="client:MemberDeleteBPELResponseMessage"/>
    <variable name="filename" type="xsd:string"/>
    <variable name="invalidVar" messageType="bpelx:RuntimeFaultMessage"/>
    <variable name="replyErrorValidation_process_OutputVariable"
              messageType="client:MemberDeleteBPELResponseMessage"/>
    <variable name="i_SKD_Produce_Message_InputVariable"
              messageType="ns5:Produce_Message_msg"/>
  </variables>
  <faultHandlers>
    <catch faultName="bpelx:invalidVariables" faultVariable="invalidVar">
      <sequence>
        <assign name="a_replyValidation">
          <copy>
            <from expression="xpath20:current-dateTime()"/>
            <to variable="replyErrorValidation_process_OutputVariable"
                part="payload" query="/ns8:wsReply/ns8:receiveDateTime"/>
          </copy>
          <copy>
            <from expression="'ERROR'"/>
            <to variable="replyErrorValidation_process_OutputVariable"
                part="payload" query="/ns8:wsReply/ns8:status"/>
          </copy>
          <copy>
            <from expression="string(bpws:getVariableData('invalidVar','summary'))"/>
            <to variable="replyErrorValidation_process_OutputVariable"
                part="payload" query="/ns8:wsReply/ns8:description"/>
          </copy>
        </assign>
        <reply name="replyErrorValidation"
               variable="replyErrorValidation_process_OutputVariable"
               partnerLink="memberdeletebpel_client"
               portType="client:MemberDeleteBPEL" operation="process"/>
      </sequence>
    </catch>
  </faultHandlers>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">

    <!-- Receive input from requestor. (Note: This maps to operation defined in MemberDeleteBPEL.wsdl) -->
    <receive name="receiveInput" partnerLink="memberdeletebpel_client" portType="client:MemberDeleteBPEL" operation="process" variable="inputVariable" createInstance="yes"/>

    <!-- Generate reply to synchronous request -->
    <bpelx:validate name="inputValidation" variables="inputVariable"/>
    <assign name="assign_sukses">
      <copy>
        <from expression="'Member delete BPEL telah berhasil diproses.'"/>
        <to variable="outputVariable" part="payload"
            query="/ns8:wsReply/ns8:description"/>
      </copy>
      <copy>
        <from expression="'SUCCESS'"/>
        <to variable="outputVariable" part="payload"
            query="/ns8:wsReply/ns8:status"/>
      </copy>
      <copy>
        <from expression="xpath20:current-dateTime()"/>
        <to variable="outputVariable" part="payload"
            query="/ns8:wsReply/ns8:receiveDateTime"/>
      </copy>
    </assign>
    <assign name="settingFilename">
      <copy>
        <from expression="ora:getCurrentDateTime(&quot;yyyyMMddHHmmssSSS'_member.xml'&quot;)"/>
        <to variable="filename"/>
      </copy>
    </assign>
    <scope name="processiing">
      <variables>
        <variable name="inbound_sendInboundMonitor_InputVariable"
                  messageType="ns1:requestInboundMessage"/>
        <variable name="inbound_sendInboundMonitor_OutputVariable"
                  messageType="ns1:replyMessage"/>
        <variable name="reference_getXMLData_InputVariable"
                  messageType="ns3:getXMLDataRequestMessage"/>
        <variable name="reference_getXMLData_OutputVariable"
                  messageType="ns3:getXMLDataReplyMessage"/>
        <variable name="temp_msg" element="ns13:kpeiInbound"/>
        <variable name="MessageDigest_getMiddlewareConfig_InputVariable"
                  messageType="ns3:getMiddlewareConfigRequestMessage"/>
        <variable name="MessageDigest_getMiddlewareConfig_OutputVariable"
                  messageType="ns3:getMiddlewareConfigReplyMessage"/>
        <variable name="local_getLogicalDirectory_InputVariable"
                  messageType="ns3:getLogicalDirectoryRequestMessage"/>
        <variable name="local_getLogicalDirectory_OutputVariable"
                  messageType="ns3:getLogicalDirectoryReplyMessage"/>
        <variable name="ext_getLogicalDirectory_InputVariable"
                  messageType="ns3:getLogicalDirectoryRequestMessage"/>
        <variable name="ext_getLogicalDirectory_OutputVariable"
                  messageType="ns3:getLogicalDirectoryReplyMessage"/>
        <variable name="drc_getLogicalDirectory_InputVariable"
                  messageType="ns3:getLogicalDirectoryRequestMessage"/>
        <variable name="drc_getLogicalDirectory_OutputVariable"
                  messageType="ns3:getLogicalDirectoryReplyMessage"/>
        <variable name="dir_lokal" type="xsd:string"/>
        <variable name="dir_ext" type="xsd:string"/>
        <variable name="dir_drc" type="xsd:string"/>
        <variable name="writeLocal_Write-local_InputVariable"
                  messageType="ns4:Write-local_msg"/>
        <variable name="writeExt_copyFile_InputVariable"
                  messageType="ns2:copyFileRequestMessage"/>
        <variable name="writeExt_copyFile_OutputVariable"
                  messageType="ns2:copyFileReplyMessage"/>
        <variable name="writeDRC_copyFile_InputVariable"
                  messageType="ns2:copyFileRequestMessage"/>
        <variable name="writeDRC_copyFile_OutputVariable"
                  messageType="ns2:copyFileReplyMessage"/>
        <variable name="logOutbound_sendOutboundMonitor_InputVariable"
                  messageType="ns1:requestOutboundMessage"/>
        <variable name="logOutbound_sendOutboundMonitor_OutputVariable"
                  messageType="ns1:replyMessage"/>
        <variable name="logRelation_sendRelationMonitor_InputVariable"
                  messageType="ns1:requestRelationMessage"/>
        <variable name="logRelation_sendRelationMonitor_OutputVariable"
                  messageType="ns1:replyMessage"/>
        <variable name="what-if_getLogicalDirectory_InputVariable"
                  messageType="ns3:getLogicalDirectoryRequestMessage"/>
        <variable name="what-if_getLogicalDirectory_OutputVariable"
                  messageType="ns3:getLogicalDirectoryReplyMessage"/>
        <variable name="dir_what-if" type="xsd:string"/>
        <variable name="writeWhat-If_copyFile_InputVariable"
                  messageType="ns2:copyFileRequestMessage"/>
        <variable name="writeWhat-If_copyFile_OutputVariable"
                  messageType="ns2:copyFileReplyMessage"/>
      </variables>
      <faultHandlers>
        <catchAll>
          <assign name="assign_error">
            <copy>
              <from expression="concat('[MW001] Error pada komponen Member delete BPEL, InstanceId=',string(ora:getInstanceId()))"/>
              <to variable="outputVariable" part="payload"
                  query="/ns8:wsReply/ns8:description"/>
            </copy>
            <copy>
              <from expression="'ERROR'"/>
              <to variable="outputVariable" part="payload"
                  query="/ns8:wsReply/ns8:status"/>
            </copy>
            <copy>
              <from expression="xpath20:current-dateTime()"/>
              <to variable="outputVariable" part="payload"
                  query="/ns8:wsReply/ns8:receiveDateTime"/>
            </copy>
          </assign>
        </catchAll>
      </faultHandlers>
      <sequence name="proc">
        <sequence name="getReference">
          <assign name="a_reference">
            <copy>
              <from expression="'memberUpdateEOD'"/>
              <to variable="reference_getXMLData_InputVariable" part="request"
                  query="/ns11:getXMLDataRequest/ns11:schemaName"/>
            </copy>
          </assign>
          <invoke name="reference"
                  inputVariable="reference_getXMLData_InputVariable"
                  outputVariable="reference_getXMLData_OutputVariable"
                  partnerLink="GE03-XMLUtility" portType="ns3:GE03-XMLUtility"
                  operation="getXMLData"/>
        </sequence>
        <sequence name="enrichment">
          <assign name="inboundEnrich">
            <bpelx:annotation>
              <bpelx:pattern>transformation</bpelx:pattern>
            </bpelx:annotation>
            <copy>
              <from expression="ora:doXSLTransformForDoc('xsl/MembeDelete.xsl',bpws:getVariableData('reference_getXMLData_OutputVariable','reply'),'inputVariable.payload',bpws:getVariableData('inputVariable','payload'))"/>
              <to variable="temp_msg"/>
            </copy>
          </assign>
        </sequence>
        <sequence name="simpanKirim">
          <flow name="getReference">
            <sequence name="getMessageDigest">
              <assign name="a_MessageDigest">
                <copy>
                  <from expression="'MESSAGE_DIGEST'"/>
                  <to variable="MessageDigest_getMiddlewareConfig_InputVariable"
                      part="request"
                      query="/ns11:getMiddlewareConfigRequest/ns11:MiddlewareParam"/>
                </copy>
              </assign>
              <invoke name="MessageDigest"
                      inputVariable="MessageDigest_getMiddlewareConfig_InputVariable"
                      outputVariable="MessageDigest_getMiddlewareConfig_OutputVariable"
                      partnerLink="GE03-XMLUtility"
                      portType="ns3:GE03-XMLUtility"
                      operation="getMiddlewareConfig"/>
            </sequence>
            <sequence name="getLogicalDirectory">
              <assign name="a_setlogical">
                <copy>
                  <from expression="'ARMSMember_local'"/>
                  <to variable="local_getLogicalDirectory_InputVariable"
                      part="request"
                      query="/ns11:getLogicalDirectoryRequest/ns11:logicalDirectoryName"/>
                </copy>
                <copy>
                  <from expression="'ARMSMember_ext'"/>
                  <to variable="ext_getLogicalDirectory_InputVariable"
                      part="request"
                      query="/ns11:getLogicalDirectoryRequest/ns11:logicalDirectoryName"/>
                </copy>
                <copy>
                  <from expression="'ARMSMember_drc'"/>
                  <to variable="drc_getLogicalDirectory_InputVariable"
                      part="request"
                      query="/ns11:getLogicalDirectoryRequest/ns11:logicalDirectoryName"/>
                </copy>
                <copy>
                  <from expression="'ARMSMember_whatif'"/>
                  <to variable="what-if_getLogicalDirectory_InputVariable"
                      part="request"
                      query="/ns11:getLogicalDirectoryRequest/ns11:logicalDirectoryName"/>
                </copy>
              </assign>
              <invoke name="local"
                      inputVariable="local_getLogicalDirectory_InputVariable"
                      outputVariable="local_getLogicalDirectory_OutputVariable"
                      partnerLink="GE03-XMLUtility"
                      portType="ns3:GE03-XMLUtility"
                      operation="getLogicalDirectory"/>
              <invoke name="ext"
                      partnerLink="GE03-XMLUtility"
                      portType="ns3:GE03-XMLUtility"
                      operation="getLogicalDirectory"
                      inputVariable="ext_getLogicalDirectory_InputVariable"
                      outputVariable="ext_getLogicalDirectory_OutputVariable"/>
              <invoke name="drc"
                      partnerLink="GE03-XMLUtility"
                      portType="ns3:GE03-XMLUtility"
                      operation="getLogicalDirectory"
                      inputVariable="drc_getLogicalDirectory_InputVariable"
                      outputVariable="drc_getLogicalDirectory_OutputVariable"/>
              <invoke name="what-if"
                      inputVariable="what-if_getLogicalDirectory_InputVariable"
                      outputVariable="what-if_getLogicalDirectory_OutputVariable"
                      partnerLink="GE03-XMLUtility"
                      portType="ns3:GE03-XMLUtility"
                      operation="getLogicalDirectory"/>
              <assign name="a_dir">
                <copy>
                  <from variable="local_getLogicalDirectory_OutputVariable"
                        part="reply"
                        query="/ns11:getLogicalDirectoryReply/ns11:logicalDirectory/ns11:physicalPath"/>
                  <to variable="dir_lokal"/>
                </copy>
                <copy>
                  <from variable="ext_getLogicalDirectory_OutputVariable"
                        part="reply"
                        query="/ns11:getLogicalDirectoryReply/ns11:logicalDirectory/ns11:physicalPath"/>
                  <to variable="dir_ext"/>
                </copy>
                <copy>
                  <from variable="drc_getLogicalDirectory_OutputVariable"
                        part="reply"
                        query="/ns11:getLogicalDirectoryReply/ns11:logicalDirectory/ns11:physicalPath"/>
                  <to variable="dir_drc"/>
                </copy>
                <copy>
                  <from variable="what-if_getLogicalDirectory_OutputVariable"
                        part="reply"
                        query="/ns11:getLogicalDirectoryReply/ns11:logicalDirectory/ns11:physicalPath"/>
                  <to variable="dir_what-if"/>
                </copy>
              </assign>
            </sequence>
          </flow>
          <sequence name="writeLocal">
            <assign name="a_writeLocal">
              <copy>
                <from variable="temp_msg" query="/ns13:kpeiInbound"/>
                <to variable="writeLocal_Write-local_InputVariable" part="body"
                    query="/ns13:kpeiInbound"/>
              </copy>
              <copy>
                <from expression="substring-before(string(bpws:getVariableData('filename')),'.xml')"/>
                <to variable="writeLocal_Write-local_InputVariable" part="body"
                    query="/ns13:kpeiInbound/ns13:header/@id"/>
              </copy>
              <copy>
                <from expression="xpath20:current-dateTime()"/>
                <to variable="writeLocal_Write-local_InputVariable" part="body"
                    query="/ns13:kpeiInbound/ns13:header/ns13:asAt"/>
              </copy>
            </assign>
            <assign name="assignDateZ">
              <copy>
                <from expression="concat(xpath20:format-dateTime(string(bpws:getVariableData('writeLocal_Write-local_InputVariable','body','/ns13:kpeiInbound/ns13:header/ns13:asAt')),'[Y0001]-[M01]-[D01]T[H01]:[m01]:[s01]'),'Z')"/>
                <to variable="writeLocal_Write-local_InputVariable" part="body"
                    query="/ns13:kpeiInbound/ns13:header/ns13:asAt"/>
              </copy>
            </assign>
            <invoke name="writeLocal"
                    inputVariable="writeLocal_Write-local_InputVariable"
                    partnerLink="writeLocal" portType="ns4:Write_local_ptt"
                    operation="Write-local">
              <bpelx:inputProperty name="jca.file.Directory"
                                   variable="dir_lokal"/>
              <bpelx:inputProperty name="jca.file.FileName"
                                   variable="filename"/>
            </invoke>
          </sequence>
          <sequence name="writeExt">
            <assign name="a_writeEx">
              <copy>
                <from variable="dir_lokal"/>
                <to variable="writeExt_copyFile_InputVariable" part="request"
                    query="/ns14:copyFileRequest/ns14:sourceDirectory"/>
              </copy>
              <copy>
                <from variable="dir_ext"/>
                <to variable="writeExt_copyFile_InputVariable" part="request"
                    query="/ns14:copyFileRequest/ns14:targetDirectory"/>
              </copy>
              <copy>
                <from variable="filename"/>
                <to variable="writeExt_copyFile_InputVariable" part="request"
                    query="/ns14:copyFileRequest/ns14:fileName"/>
              </copy>
              <copy>
                <from expression="xpath20:lower-case(string(bpws:getVariableData('MessageDigest_getMiddlewareConfig_OutputVariable','reply','/ns11:getMiddlewareConfigReply/ns11:Value')))"/>
                <to variable="writeExt_copyFile_InputVariable" part="request"
                    query="/ns14:copyFileRequest/ns14:messageDigest"/>
              </copy>
            </assign>
            <invoke name="writeExt"
                    inputVariable="writeExt_copyFile_InputVariable"
                    outputVariable="writeExt_copyFile_OutputVariable"
                    partnerLink="GE02-FileUtility"
                    portType="ns2:GE02-FileUtility" operation="copyFile"/>
            <switch name="Switch_1">
              <case condition="contains(string(bpws:getVariableData('writeExt_copyFile_OutputVariable','reply','/ns14:copyFileReply/ns14:status')),'ERROR')">
                <throw name="ERROR" faultName="bpws:selectionFailure"/>
              </case>
              <otherwise/>
            </switch>
          </sequence>
          <sequence name="writeDRC">
            <assign name="a_writeDRC">
              <copy>
                <from variable="dir_lokal"/>
                <to variable="writeDRC_copyFile_InputVariable" part="request"
                    query="/ns14:copyFileRequest/ns14:sourceDirectory"/>
              </copy>
              <copy>
                <from variable="dir_drc"/>
                <to variable="writeDRC_copyFile_InputVariable" part="request"
                    query="/ns14:copyFileRequest/ns14:targetDirectory"/>
              </copy>
              <copy>
                <from variable="filename"/>
                <to variable="writeDRC_copyFile_InputVariable" part="request"
                    query="/ns14:copyFileRequest/ns14:fileName"/>
              </copy>
              <copy>
                <from expression="xpath20:lower-case(string(bpws:getVariableData('MessageDigest_getMiddlewareConfig_OutputVariable','reply','/ns11:getMiddlewareConfigReply/ns11:Value')))"/>
                <to variable="writeDRC_copyFile_InputVariable" part="request"
                    query="/ns14:copyFileRequest/ns14:messageDigest"/>
              </copy>
            </assign>
            <invoke name="writeDRC"
                    inputVariable="writeDRC_copyFile_InputVariable"
                    outputVariable="writeDRC_copyFile_OutputVariable"
                    partnerLink="GE02-FileUtility"
                    portType="ns2:GE02-FileUtility" operation="copyFile"/>
            <switch name="Switch_2">
              <case condition="contains(string(bpws:getVariableData('writeDRC_copyFile_OutputVariable','reply','/ns14:copyFileReply/ns14:status')),'ERROR')">
                <throw name="ERROR_DRC" faultName="bpws:selectionFailure"/>
              </case>
              <otherwise/>
            </switch>
          </sequence>
          <sequence name="write_What-If">
            <assign name="a_writeWhat-If">
              <copy>
                <from variable="dir_lokal"/>
                <to variable="writeWhat-If_copyFile_InputVariable"
                    part="request"
                    query="/ns14:copyFileRequest/ns14:sourceDirectory"/>
              </copy>
              <copy>
                <from variable="dir_what-if"/>
                <to variable="writeWhat-If_copyFile_InputVariable"
                    part="request"
                    query="/ns14:copyFileRequest/ns14:targetDirectory"/>
              </copy>
              <copy>
                <from variable="filename"/>
                <to variable="writeWhat-If_copyFile_InputVariable"
                    part="request" query="/ns14:copyFileRequest/ns14:fileName"/>
              </copy>
              <copy>
                <from expression="xpath20:lower-case(string(bpws:getVariableData('MessageDigest_getMiddlewareConfig_OutputVariable','reply','/ns11:getMiddlewareConfigReply/ns11:Value')))"/>
                <to variable="writeWhat-If_copyFile_InputVariable"
                    part="request"
                    query="/ns14:copyFileRequest/ns14:messageDigest"/>
              </copy>
            </assign>
            <invoke name="writeWhat-If"
                    inputVariable="writeWhat-If_copyFile_InputVariable"
                    outputVariable="writeWhat-If_copyFile_OutputVariable"
                    partnerLink="GE02-FileUtility"
                    portType="ns2:GE02-FileUtility" operation="copyFile"/>
            <switch name="Switch_3">
              <case condition="contains(string(bpws:getVariableData('writeWhat-If_copyFile_OutputVariable','reply','/ns14:copyFileReply/ns14:status')),'ERROR')">
                <throw name="ERROR_What-If" faultName="bpws:selectionFailure"/>
              </case>
              <otherwise/>
            </switch>
          </sequence>
        </sequence>
        <sequence name="SKD">
          <assign name="t_SKD">
            <bpelx:annotation>
              <bpelx:pattern>transformation</bpelx:pattern>
            </bpelx:annotation>
            <copy>
              <from expression="ora:processXSLT('xsl/Transformation_SKD_Delete.xsl',bpws:getVariableData('inputVariable','payload'))"/>
              <to variable="i_SKD_Produce_Message_InputVariable"
                  part="body"/>
            </copy>
          </assign>
          <invoke name="i_SKD"
                  inputVariable="i_SKD_Produce_Message_InputVariable"
                  partnerLink="MemberUpdate"
                  portType="ns5:Produce_Message_ptt"
                  operation="Produce_Message"/>
        </sequence>
      </sequence>
    </scope>
    <assign name="assignWriteDateZ">
      <copy>
        <from expression="concat(xpath20:format-dateTime(xpath20:current-dateTime(),'[Y0001]-[M01]-[D01]T[H01]:[m01]:[s01]'),'Z')"/>
        <to variable="outputVariable" part="payload"
            query="/ns8:wsReply/ns8:receiveDateTime"/>
      </copy>
    </assign>
    <reply name="replyOutput" partnerLink="memberdeletebpel_client" portType="client:MemberDeleteBPEL" operation="process" variable="outputVariable"/>
  </sequence>
</process>