<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Tue Mar 23 15:56:53 ICT 2010
  Author:  medisagn64
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="MemberUpdateBPEL"
               targetNamespace="http://xmlns.oracle.com/ARIS_KPEI_PROJECT_jws/OR01_ARMSMember/MemberUpdateBPEL"
               xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
               xmlns:client="http://xmlns.oracle.com/ARIS_KPEI_PROJECT_jws/OR01_ARMSMember/MemberUpdateBPEL"
               xmlns:ora="http://schemas.oracle.com/xpath/extension"
               xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
               xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:ns1="http://oracle.com/sca/soapservice/KPEI-MIDDLEWARE/Ge01-messageMonitor/messageMonitorService"
         xmlns:ns2="http://www.kpei.co.id/GE02-FileUtility"
         xmlns:ns3="http://oracle.com/sca/soapservice/kpei/GE03-XMLUtility/GE03_XMLUtility"
         xmlns:ns4="http://xmlns.oracle.com/pcbpel/adapter/file/ARIS-KPEI-PROJECT/OR01-ARMSMember/update_EOD_writeLocal"
         xmlns:ns5="http://xmlns.oracle.com/pcbpel/adapter/file/ARIS-KPEI-PROJECT/OR01-ARMSMember/update_IntraDay_write"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
        xmlns:xpath20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ns6="http://kpei.co.id/MDwsReply.xsd"
         xmlns:ns7="http://www.kpei.co.id/razor/Member_EOD"
         xmlns:ns8="http://www.kpei.co.id/razor/Member_Intraday"
         xmlns:ns9="http://www.kpei.co.id/kpei/messageMonitor"
         xmlns:ns10="http://www.kpei.co.id/schema/Member.001"
         xmlns:socket="http://www.oracle.com/XSL/Transform/java/oracle.tip.adapter.socket.ProtocolTranslator"
         xmlns:mhdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.mediator.service.common.functions.MediatorExtnFunction"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:med="http://schemas.oracle.com/mediator/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:ns11="http://www.kpei.co.id/GE03-XMLUtility/types"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:ns12="http://www.kpei.co.id/GE02-FileUtility/types"
         xmlns:ns13="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:bpmn="http://schemas.oracle.com/bpm/xpath"
         xmlns:ns14="http://xmlns.oracle.com/pcbpel/adapter/jms/ARIS-KPEI-PROJECT/OR01-ARMSMember/MemberUpdate">

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  --> 
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="memberupdatebpel_client" partnerLinkType="client:MemberUpdateBPEL" myRole="MemberUpdateBPELProvider"/>
    <partnerLink name="GE02-FileUtility" partnerRole="GE02-FileUtility"
                 partnerLinkType="ns2:GE02-FileUtility"/>
    <partnerLink name="GE03-XMLUtility" partnerRole="GE03-XMLUtility"
                 partnerLinkType="ns3:GE03-XMLUtility"/>
    <partnerLink name="update-EOD-writeLocal" partnerRole="Write-updateEOD_role"
                 partnerLinkType="ns4:Write_updateEOD_plt"/>
    <partnerLink name="update-IntraDay-write" partnerRole="Write-intraday_role"
                 partnerLinkType="ns5:Write_intraday_plt"/>
    <partnerLink name="MemberUpdate" partnerRole="Produce_Message_role"
                 partnerLinkType="ns14:Produce_Message_plt"/>
  </partnerLinks>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable" messageType="client:MemberUpdateBPELRequestMessage"/>

    <!-- Reference to the message that will be returned to the requester-->
    <variable name="outputVariable" messageType="client:MemberUpdateBPELResponseMessage"/>
    <variable name="filename" type="xsd:string"/>
    <variable name="dir_local" type="xsd:string"/>
    <variable name="dir_ext" type="xsd:string"/>
    <variable name="dir_drc" type="xsd:string"/>
    <variable name="digest" type="xsd:string"/>
    <variable name="invalidVar" messageType="bpelx:RuntimeFaultMessage"/>
    <variable name="Reply_Validation_process_OutputVariable"
              messageType="client:MemberUpdateBPELResponseMessage"/>
    <variable name="dir_what-if" type="xsd:string"/>
    <variable name="i_SKD_Produce_Message_InputVariable"
              messageType="ns14:Produce_Message_msg"/>
  </variables>
  <faultHandlers>
    <catch faultName="bpelx:invalidVariables" faultVariable="invalidVar">
      <sequence>
        <assign name="invalidVar">
          <copy>
            <from expression="xpath20:current-dateTime()"/>
            <to variable="Reply_Validation_process_OutputVariable"
                part="payload" query="/ns6:wsReply/ns6:receiveDateTime"/>
          </copy>
          <copy>
            <from expression="'ERROR'"/>
            <to variable="Reply_Validation_process_OutputVariable"
                part="payload" query="/ns6:wsReply/ns6:status"/>
          </copy>
          <copy>
            <from expression="string(bpws:getVariableData('invalidVar','summary'))"/>
            <to variable="Reply_Validation_process_OutputVariable"
                part="payload" query="/ns6:wsReply/ns6:description"/>
          </copy>
        </assign>
        <reply name="Reply_Validation"
               variable="Reply_Validation_process_OutputVariable"
               partnerLink="memberupdatebpel_client"
               portType="client:MemberUpdateBPEL" operation="process"/>
      </sequence>
    </catch>
  </faultHandlers>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">

    <!-- Receive input from requestor. (Note: This maps to operation defined in MemberUpdateBPEL.wsdl) -->
    <receive name="receiveInput" partnerLink="memberupdatebpel_client" portType="client:MemberUpdateBPEL" operation="process" variable="inputVariable" createInstance="yes"/>

    <!-- Generate reply to synchronous request -->
    <bpelx:validate name="inputValidation" variables="inputVariable"/>
    <assign name="assign_sukses">
      <copy>
        <from expression="xpath20:current-dateTime()"/>
        <to variable="outputVariable" part="payload"
            query="/ns6:wsReply/ns6:receiveDateTime"/>
      </copy>
      <copy>
        <from expression="'SUCCESS'"/>
        <to variable="outputVariable" part="payload"
            query="/ns6:wsReply/ns6:status"/>
      </copy>
      <copy>
        <from expression="'Member Update BPEL telah berhasil diproses.'"/>
        <to variable="outputVariable" part="payload"
            query="/ns6:wsReply/ns6:description"/>
      </copy>
    </assign>
    <assign name="settingFilename">
      <copy>
        <from expression="ora:getCurrentDateTime(&quot;yyyyMMddHHmmssSSS'_member.xml'&quot;)"/>
        <to variable="filename"/>
      </copy>
    </assign>
    <scope name="processing">
      <variables>
        <variable name="temp_EOD_msg" element="ns7:kpeiInbound"/>
        <variable name="temp_Intra_msg" element="ns8:kpeiInbound"/>
        <variable name="logInbound_sendInboundMonitor_InputVariable"
                  messageType="ns1:requestInboundMessage"/>
        <variable name="logInbound_sendInboundMonitor_OutputVariable"
                  messageType="ns1:replyMessage"/>
        <variable name="reference_getXMLData_InputVariable"
                  messageType="ns3:getXMLDataRequestMessage"/>
        <variable name="reference_getXMLData_OutputVariable"
                  messageType="ns3:getXMLDataReplyMessage"/>
        <variable name="messageDigest_getMiddlewareConfig_InputVariable"
                  messageType="ns3:getMiddlewareConfigRequestMessage"/>
        <variable name="messageDigest_getMiddlewareConfig_OutputVariable"
                  messageType="ns3:getMiddlewareConfigReplyMessage"/>
        <variable name="local_getLogicalDirectory_InputVariable"
                  messageType="ns3:getLogicalDirectoryRequestMessage"/>
        <variable name="local_getLogicalDirectory_OutputVariable"
                  messageType="ns3:getLogicalDirectoryReplyMessage"/>
        <variable name="ext_getLogicalDirectory_InputVariable"
                  messageType="ns3:getLogicalDirectoryRequestMessage"/>
        <variable name="ext_getLogicalDirectory_OutputVariable"
                  messageType="ns3:getLogicalDirectoryReplyMessage"/>
        <variable name="drc_getLogicalDirectory_InputVariable"
                  messageType="ns3:getLogicalDirectoryRequestMessage"/>
        <variable name="drc_getLogicalDirectory_OutputVariable"
                  messageType="ns3:getLogicalDirectoryReplyMessage"/>
        <variable name="writeLocal_intra_Write-intraday_InputVariable"
                  messageType="ns5:Write-intraday_msg"/>
        <variable name="writeLocal_EOD_Write-updateEOD_InputVariable"
                  messageType="ns4:Write-updateEOD_msg"/>
        <variable name="writeExt_copyFile_InputVariable"
                  messageType="ns2:copyFileRequestMessage"/>
        <variable name="writeExt_copyFile_OutputVariable"
                  messageType="ns2:copyFileReplyMessage"/>
        <variable name="writeDRC_copyFile_InputVariable"
                  messageType="ns2:copyFileRequestMessage"/>
        <variable name="writeDRC_copyFile_OutputVariable"
                  messageType="ns2:copyFileReplyMessage"/>
        <variable name="logOutbound_sendOutboundMonitor_InputVariable"
                  messageType="ns1:requestOutboundMessage"/>
        <variable name="logOutbound_sendOutboundMonitor_OutputVariable"
                  messageType="ns1:replyMessage"/>
        <variable name="logRelation_sendRelationMonitor_InputVariable"
                  messageType="ns1:requestRelationMessage"/>
        <variable name="logRelation_sendRelationMonitor_OutputVariable"
                  messageType="ns1:replyMessage"/>
        <variable name="what-if_getLogicalDirectory_InputVariable"
                  messageType="ns3:getLogicalDirectoryRequestMessage"/>
        <variable name="what-if_getLogicalDirectory_OutputVariable"
                  messageType="ns3:getLogicalDirectoryReplyMessage"/>
        <variable name="writeWhat-If_copyFile_InputVariable"
                  messageType="ns2:copyFileRequestMessage"/>
        <variable name="writeWhat-If_copyFile_OutputVariable"
                  messageType="ns2:copyFileReplyMessage"/>
      </variables>
      <faultHandlers>
        <catchAll>
         <assign name="assign_error">
            <copy>
              <from expression="xpath20:current-dateTime()"/>
              <to variable="outputVariable" part="payload"
                  query="/ns6:wsReply/ns6:receiveDateTime"/>
            </copy>
            <copy>
              <from expression="'ERROR'"/>
              <to variable="outputVariable" part="payload"
                  query="/ns6:wsReply/ns6:status"/>
            </copy>
            <copy>
              <from expression="concat('[MW001] Error pada komponen Member pdate BPEL, InstanceId=',string(ora:getInstanceId()),' Error=',ora:getFaultAsString())"/>
              <to variable="outputVariable" part="payload"
                  query="/ns6:wsReply/ns6:description"/>
            </copy>
          </assign>
        </catchAll>
      </faultHandlers>
      <sequence name="Sequence_1">
        <sequence name="getReference">
          <switch name="EOD_or_Itra">
            <case condition="contains(string(bpws:getVariableData('inputVariable','payload','/ns10:MemberUpdate/ns10:type')),'INTRA')">
              <bpelx:annotation>
                <bpelx:pattern>intra</bpelx:pattern>
              </bpelx:annotation>
              <assign name="assignUpdate">
                <copy>
                  <from expression="'memberUpdate'"/>
                  <to variable="reference_getXMLData_InputVariable"
                      part="request"
                      query="/ns11:getXMLDataRequest/ns11:schemaName"/>
                </copy>
              </assign>
            </case>
            <case condition="contains(string(bpws:getVariableData('inputVariable','payload','/ns10:MemberUpdate/ns10:type')),'EOD')">
              <bpelx:annotation>
                <bpelx:pattern>EOD</bpelx:pattern>
              </bpelx:annotation>
              <assign name="assignEOD">
                <copy>
                  <from expression="'memberUpdateEOD'"/>
                  <to variable="reference_getXMLData_InputVariable"
                      part="request"
                      query="/ns11:getXMLDataRequest/ns11:schemaName"/>
                </copy>
              </assign>
            </case>
            <otherwise>
              <throw name="type_not_match" faultName="bpws:forcedTermination"/>
            </otherwise>
          </switch>
          <invoke name="reference"
                  inputVariable="reference_getXMLData_InputVariable"
                  outputVariable="reference_getXMLData_OutputVariable"
                  partnerLink="GE03-XMLUtility" portType="ns3:GE03-XMLUtility"
                  operation="getXMLData"/>
        </sequence>
        <sequence name="enrichment">
          <switch name="enrichment_process">
            <case condition="contains(string(bpws:getVariableData('inputVariable','payload','/ns10:MemberUpdate/ns10:type')),'INTRA')">
              <bpelx:annotation>
                <bpelx:pattern>intra</bpelx:pattern>
              </bpelx:annotation>
              <sequence>
                <assign name="enrichIntra">
                  <bpelx:annotation>
                    <bpelx:pattern>transformation</bpelx:pattern>
                  </bpelx:annotation>
                  <copy>
                    <from expression="ora:doXSLTransformForDoc('xsl/enrichUpdateIntra.xsl',bpws:getVariableData('inputVariable','payload'),'reference_getXMLData_OutputVariable.reply',bpws:getVariableData('reference_getXMLData_OutputVariable','reply'))"/>
                    <to variable="temp_Intra_msg"/>
                  </copy>
                </assign>
                <assign name="assignIntra">
                  <copy>
                    <from
                          expression="substring-before(string(bpws:getVariableData('filename')),'.xml')"/>
                    <to variable="temp_Intra_msg"
                        query="/ns8:kpeiInbound/ns8:header/@id"/>
                  </copy>
                  <copy>
                    <from expression="xpath20:current-dateTime()"/>
                    <to variable="temp_Intra_msg"
                        query="/ns8:kpeiInbound/ns8:header/ns8:asAt"/>
                  </copy>
                </assign>
              </sequence>
            </case>
            <case condition="contains(string(bpws:getVariableData('inputVariable','payload','/ns10:MemberUpdate/ns10:type')),'EOD')">
              <bpelx:annotation>
                <bpelx:pattern>EOD</bpelx:pattern>
              </bpelx:annotation>
              <sequence>
                <assign name="enrichEOD">
                  <bpelx:annotation>
                    <bpelx:pattern>transformation</bpelx:pattern>
                  </bpelx:annotation>
                  <copy>
                    <from expression="ora:doXSLTransformForDoc('xsl/enrichUpdateEOD-2.xsl',bpws:getVariableData('inputVariable','payload'),'reference_getXMLData_OutputVariable.reply',bpws:getVariableData('reference_getXMLData_OutputVariable','reply'))"/>
                    <to variable="temp_EOD_msg"/>
                  </copy>
                </assign>
                <assign name="assignEOD">
                  <copy>
                    <from expression="substring-before(string(bpws:getVariableData('filename')),'.xml')"/>
                    <to variable="temp_EOD_msg"
                        query="/ns7:kpeiInbound/ns7:header/@id"/>
                  </copy>
                  <copy>
                    <from expression="xpath20:current-dateTime()"/>
                    <to variable="temp_EOD_msg"
                        query="/ns7:kpeiInbound/ns7:header/ns7:asAt"/>
                  </copy>
                </assign>
              </sequence>
            </case>
            <otherwise>
              <throw name="type_not_match" faultName="bpws:forcedTermination"/>
            </otherwise>
          </switch>
        </sequence>
        <sequence name="simpanKirim">
          <flow name="getReference">
            <sequence name="getMessageDigest">
              <assign name="messageDigest">
                <copy>
                  <from expression="'MESSAGE_DIGEST'"/>
                  <to variable="messageDigest_getMiddlewareConfig_InputVariable"
                      part="request"
                      query="/ns11:getMiddlewareConfigRequest/ns11:MiddlewareParam"/>
                </copy>
              </assign>
              <invoke name="messageDigest"
                      inputVariable="messageDigest_getMiddlewareConfig_InputVariable"
                      outputVariable="messageDigest_getMiddlewareConfig_OutputVariable"
                      partnerLink="GE03-XMLUtility"
                      portType="ns3:GE03-XMLUtility"
                      operation="getMiddlewareConfig"/>
              <assign name="a_digest">
                <copy>
                  <from expression="string(bpws:getVariableData('messageDigest_getMiddlewareConfig_OutputVariable','reply','/ns11:getMiddlewareConfigReply/ns11:Value'))"/>
                  <to variable="digest"/>
                </copy>
              </assign>
            </sequence>
            <sequence name="logicalDirectory">
              <switch name="getReference">
                <case condition="contains(string(bpws:getVariableData('inputVariable','payload','/ns10:MemberUpdate/ns10:type')),'INTRA')">
                  <bpelx:annotation>
                    <bpelx:pattern>intra</bpelx:pattern>
                  </bpelx:annotation>
                  <sequence>
                    <assign name="INTRA">
                      <copy>
                        <from expression="'ARMSMember_local'"/>
                        <to variable="local_getLogicalDirectory_InputVariable"
                            part="request"
                            query="/ns11:getLogicalDirectoryRequest/ns11:logicalDirectoryName"/>
                      </copy>
                      <copy>
                        <from expression="'ARMSMember_ext'"/>
                        <to variable="ext_getLogicalDirectory_InputVariable"
                            part="request"
                            query="/ns11:getLogicalDirectoryRequest/ns11:logicalDirectoryName"/>
                      </copy>
                      <copy>
                        <from expression="'ARMSMember_drc'"/>
                        <to part="request"
                            query="/ns11:getLogicalDirectoryRequest/ns11:logicalDirectoryName"
                            variable="drc_getLogicalDirectory_InputVariable"/>
                      </copy>
                      <copy>
                        <from expression="'ARMSMember_what-if'"/>
                        <to variable="what-if_getLogicalDirectory_InputVariable"
                            part="request"
                            query="/ns11:getLogicalDirectoryRequest/ns11:logicalDirectoryName"/>
                      </copy>
                    </assign>
                  </sequence>
                </case>
                <case condition="contains(string(bpws:getVariableData('inputVariable','payload','/ns10:MemberUpdate/ns10:type')),'EOD')">
                  <bpelx:annotation>
                    <bpelx:pattern>EOD</bpelx:pattern>
                  </bpelx:annotation>
                  <sequence>
                    <assign name="EOD">
                      <copy>
                        <from expression="'ARMSMember_localEOD'"/>
                        <to variable="local_getLogicalDirectory_InputVariable"
                            part="request"
                            query="/ns11:getLogicalDirectoryRequest/ns11:logicalDirectoryName"/>
                      </copy>
                      <copy>
                        <from expression="'ARMSMember_extEOD'"/>
                        <to variable="ext_getLogicalDirectory_InputVariable"
                            part="request"
                            query="/ns11:getLogicalDirectoryRequest/ns11:logicalDirectoryName"/>
                      </copy>
                      <copy>
                        <from expression="'ARMSMember_drcEOD'"/>
                        <to part="request"
                            query="/ns11:getLogicalDirectoryRequest/ns11:logicalDirectoryName"
                            variable="drc_getLogicalDirectory_InputVariable"/>
                      </copy>
                      <copy>
                        <from expression="'ARMSMember_whatifEOD'"/>
                        <to variable="what-if_getLogicalDirectory_InputVariable"
                            part="request"
                            query="/ns11:getLogicalDirectoryRequest/ns11:logicalDirectoryName"/>
                      </copy>
                    </assign>
                  </sequence>
                </case>
                <otherwise>
                  <throw name="type_not_match"
                         faultName="bpws:forcedTermination"/>
                </otherwise>
              </switch>
              <invoke name="local"
                      inputVariable="local_getLogicalDirectory_InputVariable"
                      outputVariable="local_getLogicalDirectory_OutputVariable"
                      partnerLink="GE03-XMLUtility"
                      portType="ns3:GE03-XMLUtility"
                      operation="getLogicalDirectory"/>
              <invoke name="ext"
                      inputVariable="ext_getLogicalDirectory_InputVariable"
                      outputVariable="ext_getLogicalDirectory_OutputVariable"
                      partnerLink="GE03-XMLUtility"
                      portType="ns3:GE03-XMLUtility"
                      operation="getLogicalDirectory"/>
              <invoke name="drc"
                      inputVariable="drc_getLogicalDirectory_InputVariable"
                      outputVariable="drc_getLogicalDirectory_OutputVariable"
                      partnerLink="GE03-XMLUtility"
                      portType="ns3:GE03-XMLUtility"
                      operation="getLogicalDirectory"/>
              <invoke name="what-if"
                      inputVariable="what-if_getLogicalDirectory_InputVariable"
                      outputVariable="what-if_getLogicalDirectory_OutputVariable"
                      partnerLink="GE03-XMLUtility"
                      portType="ns3:GE03-XMLUtility"
                      operation="getLogicalDirectory"/>
              <assign name="a_dir">
                <copy>
                  <from variable="local_getLogicalDirectory_OutputVariable"
                        part="reply"
                        query="/ns11:getLogicalDirectoryReply/ns11:logicalDirectory/ns11:physicalPath"/>
                  <to variable="dir_local"/>
                </copy>
                <copy>
                  <from variable="ext_getLogicalDirectory_OutputVariable"
                        part="reply"
                        query="/ns11:getLogicalDirectoryReply/ns11:logicalDirectory/ns11:physicalPath"/>
                  <to variable="dir_ext"/>
                </copy>
                <copy>
                  <from variable="drc_getLogicalDirectory_OutputVariable"
                        part="reply"
                        query="/ns11:getLogicalDirectoryReply/ns11:logicalDirectory/ns11:physicalPath"/>
                  <to variable="dir_drc"/>
                </copy>
                <copy>
                  <from variable="what-if_getLogicalDirectory_OutputVariable"
                        part="reply"
                        query="/ns11:getLogicalDirectoryReply/ns11:logicalDirectory/ns11:physicalPath"/>
                  <to variable="dir_what-if"/>
                </copy>
              </assign>
            </sequence>
          </flow>
          <sequence name="writeLocal">
            <switch name="local">
                <case condition="contains(string(bpws:getVariableData('inputVariable','payload','/ns10:MemberUpdate/ns10:type')),'INTRA')">
                  <bpelx:annotation>
                    <bpelx:pattern>intra</bpelx:pattern>
                  </bpelx:annotation>
                  <sequence>
                  <assign name="a_writeLocal">
                    <copy>
                      <from variable="temp_Intra_msg" query="/ns8:kpeiInbound"/>
                      <to variable="writeLocal_intra_Write-intraday_InputVariable"
                          part="body" query="/ns8:kpeiInbound"/>
                    </copy>
                  </assign>
                  <assign name="assignDateZ">
                    <copy>
                      <from expression="concat(xpath20:format-dateTime(string(bpws:getVariableData('writeLocal_intra_Write-intraday_InputVariable','body','/ns8:kpeiInbound/ns8:header/ns8:asAt')),'[Y0001]-[M01]-[D01]T[H01]:[m01]:[s01]'),'Z')"/>
                      <to variable="writeLocal_intra_Write-intraday_InputVariable"
                          part="body"
                          query="/ns8:kpeiInbound/ns8:header/ns8:asAt"/>
                    </copy>
                  </assign>
                  <invoke name="writeLocal_intra"
                          inputVariable="writeLocal_intra_Write-intraday_InputVariable"
                          partnerLink="update-IntraDay-write"
                          portType="ns5:Write_intraday_ptt"
                          operation="Write-intraday">
                    <bpelx:inputProperty name="jca.file.Directory"
                                         variable="dir_local"/>
                    <bpelx:inputProperty name="jca.file.FileName"
                                         variable="filename"/>
                  </invoke>
                </sequence>
                </case>
                <case condition="contains(string(bpws:getVariableData('inputVariable','payload','/ns10:MemberUpdate/ns10:type')),'EOD')">
                  <bpelx:annotation>
                    <bpelx:pattern>EOD</bpelx:pattern>
                  </bpelx:annotation>
                  <sequence>
                  <assign name="a_writeLocalEOD">
                    <copy>
                      <from variable="temp_EOD_msg" query="/ns7:kpeiInbound"/>
                      <to variable="writeLocal_EOD_Write-updateEOD_InputVariable"
                          part="body" query="/ns7:kpeiInbound"/>
                    </copy>
                  </assign>
                  <assign name="assignDateZ">
                    <copy>
                      <from expression="concat(xpath20:format-dateTime(string(bpws:getVariableData('writeLocal_EOD_Write-updateEOD_InputVariable','body','/ns7:kpeiInbound/ns7:header/ns7:asAt')),'[Y0001]-[M01]-[D01]T[H01]:[m01]:[s01]'),'Z')"/>
                      <to variable="writeLocal_EOD_Write-updateEOD_InputVariable"
                          part="body"
                          query="/ns7:kpeiInbound/ns7:header/ns7:asAt"/>
                    </copy>
                  </assign>
                  <invoke name="writeLocal_EOD"
                          inputVariable="writeLocal_EOD_Write-updateEOD_InputVariable"
                          partnerLink="update-EOD-writeLocal"
                          portType="ns4:Write_updateEOD_ptt"
                          operation="Write-updateEOD">
                    <bpelx:inputProperty name="jca.file.Directory"
                                         variable="dir_local"/>
                    <bpelx:inputProperty name="jca.file.FileName"
                                         variable="filename"/>
                  </invoke>
                </sequence>
                </case>
                <otherwise>
                  <throw name="type_not_match"
                         faultName="bpws:forcedTermination"/>
                </otherwise>
              </switch>
          </sequence>
          <sequence name="writeExt">
            <assign name="a_writeExt">
              <copy>
                <from variable="dir_local"/>
                <to variable="writeExt_copyFile_InputVariable" part="request"
                    query="/ns12:copyFileRequest/ns12:sourceDirectory"/>
              </copy>
              <copy>
                <from variable="dir_ext"/>
                <to variable="writeExt_copyFile_InputVariable" part="request"
                    query="/ns12:copyFileRequest/ns12:targetDirectory"/>
              </copy>
              <copy>
                <from variable="filename"/>
                <to variable="writeExt_copyFile_InputVariable" part="request"
                    query="/ns12:copyFileRequest/ns12:fileName"/>
              </copy>
              <copy>
                <from expression="xpath20:lower-case(string(bpws:getVariableData('digest')))"/>
                <to variable="writeExt_copyFile_InputVariable" part="request"
                    query="/ns12:copyFileRequest/ns12:messageDigest"/>
              </copy>
            </assign>
            <invoke name="writeExt"
                    inputVariable="writeExt_copyFile_InputVariable"
                    outputVariable="writeExt_copyFile_OutputVariable"
                    partnerLink="GE02-FileUtility"
                    portType="ns2:GE02-FileUtility" operation="copyFile"/>
            <switch name="Switch_1">
              <case condition="contains(string(bpws:getVariableData('writeExt_copyFile_OutputVariable','reply','/ns12:copyFileReply/ns12:status')),'ERROR')">
                <throw name="ERROR" faultName="bpws:selectionFailure"/>
              </case>
              <otherwise>
                <assign name="add_success_response">
                  <copy>
                    <from expression="concat(string(bpws:getVariableData('outputVariable','payload','/ns6:wsReply/ns6:description')),' RMS_PATH=',string(bpws:getVariableData('ext_getLogicalDirectory_OutputVariable','reply','/ns11:getLogicalDirectoryReply/ns11:logicalDirectory/ns11:physicalPath')))"/>
                    <to variable="outputVariable" part="payload"
                        query="/ns6:wsReply/ns6:description"/>
                  </copy>
                </assign>
              </otherwise>
            </switch>
          </sequence>
          <sequence name="writeDRC">
            <assign name="a_writeDRC">
              <copy>
                <from variable="dir_local"/>
                <to variable="writeDRC_copyFile_InputVariable" part="request"
                    query="/ns12:copyFileRequest/ns12:sourceDirectory"/>
              </copy>
              <copy>
                <from variable="dir_drc"/>
                <to variable="writeDRC_copyFile_InputVariable" part="request"
                    query="/ns12:copyFileRequest/ns12:targetDirectory"/>
              </copy>
              <copy>
                <from variable="filename"/>
                <to variable="writeDRC_copyFile_InputVariable" part="request"
                    query="/ns12:copyFileRequest/ns12:fileName"/>
              </copy>
              <copy>
                <from expression="xpath20:lower-case(string(bpws:getVariableData('digest')))"/>
                <to variable="writeDRC_copyFile_InputVariable" part="request"
                    query="/ns12:copyFileRequest/ns12:messageDigest"/>
              </copy>
            </assign>
            <invoke name="writeDRC"
                    inputVariable="writeDRC_copyFile_InputVariable"
                    outputVariable="writeDRC_copyFile_OutputVariable"
                    partnerLink="GE02-FileUtility"
                    portType="ns2:GE02-FileUtility" operation="copyFile"/>
            <switch name="Switch_2">
              <case condition="contains(string(bpws:getVariableData('writeDRC_copyFile_OutputVariable','reply','/ns12:copyFileReply/ns12:status')),'ERROR')">
                <throw name="ERROR" faultName="bpws:selectionFailure"/>
              </case>
              <otherwise>
                <assign name="add_success_response">
                  <copy>
                    <from expression="concat(string(bpws:getVariableData('outputVariable','payload','/ns6:wsReply/ns6:description')),' DRC_PATH=',string(bpws:getVariableData('drc_getLogicalDirectory_OutputVariable','reply','/ns11:getLogicalDirectoryReply/ns11:logicalDirectory/ns11:physicalPath')))"/>
                    <to variable="outputVariable" part="payload"
                        query="/ns6:wsReply/ns6:description"/>
                  </copy>
                </assign>
              </otherwise>
            </switch>
          </sequence>
          <sequence name="writeWhat-If">
            <assign name="a_writeWhat-If">
              <copy>
                <from variable="dir_local"/>
                <to variable="writeWhat-If_copyFile_InputVariable"
                    part="request"
                    query="/ns12:copyFileRequest/ns12:sourceDirectory"/>
              </copy>
              <copy>
                <from variable="dir_what-if"/>
                <to variable="writeWhat-If_copyFile_InputVariable"
                    part="request"
                    query="/ns12:copyFileRequest/ns12:targetDirectory"/>
              </copy>
              <copy>
                <from variable="filename"/>
                <to variable="writeWhat-If_copyFile_InputVariable"
                    part="request" query="/ns12:copyFileRequest/ns12:fileName"/>
              </copy>
              <copy>
                <from expression="xpath20:lower-case(string(bpws:getVariableData('digest')))"/>
                <to variable="writeWhat-If_copyFile_InputVariable"
                    part="request"
                    query="/ns12:copyFileRequest/ns12:messageDigest"/>
              </copy>
            </assign>
            <invoke name="writeWhat-If"
                    inputVariable="writeWhat-If_copyFile_InputVariable"
                    outputVariable="writeWhat-If_copyFile_OutputVariable"
                    partnerLink="GE02-FileUtility"
                    portType="ns2:GE02-FileUtility" operation="copyFile"/>
            <switch name="Switch_3">
              <case condition="contains(string(bpws:getVariableData('writeWhat-If_copyFile_OutputVariable','reply','/ns12:copyFileReply/ns12:status')),'ERROR')">
                <throw name="ERROR" faultName="bpws:selectionFailure"/>
              </case>
              <otherwise>
                <assign name="add_success_reponse">
                  <copy>
                    <from expression="concat(string(bpws:getVariableData('outputVariable','payload','/ns6:wsReply/ns6:description')),' What-If_PATH=',string(bpws:getVariableData('what-if_getLogicalDirectory_OutputVariable','reply','/ns11:getLogicalDirectoryReply/ns11:logicalDirectory/ns11:physicalPath')))"/>
                    <to variable="outputVariable" part="payload"
                        query="/ns6:wsReply/ns6:description"/>
                  </copy>
                </assign>
              </otherwise>
            </switch>
          </sequence>
          <sequence name="SKD">
            <assign name="t_SKD">
              <bpelx:annotation>
                <bpelx:pattern>transformation</bpelx:pattern>
              </bpelx:annotation>
              <copy>
                <from expression="ora:processXSLT('xsl/Transformation_SKD.xsl',bpws:getVariableData('inputVariable','payload'))"/>
                <to variable="i_SKD_Produce_Message_InputVariable" part="body"/>
              </copy>
            </assign>
            <invoke name="i_SKD"
                    inputVariable="i_SKD_Produce_Message_InputVariable"
                    partnerLink="MemberUpdate"
                    portType="ns14:Produce_Message_ptt"
                    operation="Produce_Message"/>
          </sequence>
        </sequence>
      </sequence>
    </scope>
    <assign name="assignDateZ">
      <copy>
        <from expression="concat(xpath20:format-dateTime(xpath20:current-dateTime(),'[Y0001]-[M01]-[D01]T[H01]:[m01]:[s01]'),'Z')"/>
        <to variable="outputVariable" part="payload"
            query="/ns6:wsReply/ns6:receiveDateTime"/>
      </copy>
      <copy>
        <from expression="concat(string(bpws:getVariableData('outputVariable','payload','/ns6:wsReply/ns6:description')),' InstanceID=',string(ora:getCompositeInstanceId()))"/>
        <to variable="outputVariable" part="payload"
            query="/ns6:wsReply/ns6:description"/>
      </copy>
    </assign>
    <reply name="replyOutput" partnerLink="memberupdatebpel_client" portType="client:MemberUpdateBPEL" operation="process" variable="outputVariable"/>
  </sequence>
</process>